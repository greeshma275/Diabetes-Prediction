# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108pvqREzbuKayQY8UC7oPEtNq4claOys
"""



"""Importing the dependencies

"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and analysis PIMA dataset"""

#loading the diabetes dataset to a pandas DataFrame
diabetes_dataset = pd.read_csv('diabetes.csv')

#printing the first 5 rows of dataset
diabetes_dataset.head()

# number of rows and columns
diabetes_dataset.shape

#getting the statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""1-->Diabetic 0-->Non-diabetic"""

diabetes_dataset.groupby('Outcome').mean()

#separating the data and labels
x=diabetes_dataset.drop(columns="Outcome",axis=1)
y=diabetes_dataset['Outcome']

print(x)

print(y)

"""Data standardization

"""

scaler=StandardScaler()

scaler.fit(x)
standardized_data=scaler.transform(x)

print(standardized_data)

import pandas as pd

# Load the dataset (Change the path if necessary)
diabetes_dataset = pd.read_csv("diabetes.csv")

# Now, you can proceed
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
standardized_data = scaler.fit_transform(diabetes_dataset.drop(columns=['Outcome']))

x = standardized_data
y = diabetes_dataset['Outcome']

print(x)
print(y)

"""Train test split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)
print(x.shape,x_train.shape,x_test.shape)

from sklearn import svm
classifier=svm.SVC(kernel='linear')

#training data
classifier.fit(x_train,y_train)

"""Model evaluation"""

x_train_prediction = classifier.predict(x_train)  # Define the variable correctly
training_data_accuracy = accuracy_score(x_train_prediction, y_train)  # Now this works

print("Accuracy score of the training data:",training_data_accuracy)

#accuracy score on test data
x_test_prediction=classifier.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print("Accuracy score of the test data:",test_data_accuracy)

"""Making a predictive system"""

import numpy as np
input_data=(5,166,72,19,175,25.8,0.587,51)
#changing the input to a numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we are  predicting one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
#standardizd the input data
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)

if(prediction[0]==0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")